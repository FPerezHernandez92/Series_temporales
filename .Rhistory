library(tseries)
library(DAAG)
library(forecast)
library(astsa)
rm(list=ls())
serie <- scan("SerieLaboratorioDatos.dat")
plot.ts(serie)
plot.ts(diff(serie))
data("AirPassengers")
plot.ts(diff(AirPassengers))
plot.ts(diff(log(AirPassengers)))
tiempo <- 1:length(serie)
parametros <- lm(serie~tiempo)
b<- parametros$coefficients[1]
a<- parametros$coefficients[2]
Tendencia <- a*tiempo + b
plot.ts(serie)
lines(Tendencia, col="red")
plot.ts(parametros$residuals)
jarque.bera.test(parametros$residuals)
jarque.bera.test(parametros$residuals)
serieST <- serie-Tendencia
plot.ts(serieST)
acf(serieST)
periodo <- 12
Estacionalidad <- rep(0, periodo) #Vector para almacenar los valores medios
for (i in 1:periodo){ #Calcular cada valor en el vector
#Calculamos el valor de la estacionalidad como la media de los valores de la
#serie, comenzando por el valor "i", saltantod de "periodo" en "periodo" componentes
Estacionalidad[i] <- mean(serieST[seq(i,length(serieST),by=periodo)])
}
plot.ts(Estacionalidad)
Estacionalidad <- rep(Estacionalidad, ceiling(length(serieST)/periodo))
plot.ts(seri)
plot.ts(serieST)
lines(Estacionalidad, col="green")
serieSTSE <- serieST - Estacionalidad
plot.ts(serieSTSE)
acf(serieSTSE)
acf(diff(serieSTSE))
acf(diff(diff(serieSTSE)))
acf(serieSTSE)
pacf(serieSTSE)
acf(diff(diff(serieSTSE)))
pacf(diff(diff(serieSTSE)))
modelo1<-arima(serieSTSE, order=c(2,0,0), xreg = 1:length(serieSTSE))
modelo2<-arima(serieSTSE, order=c(0,2,1), xreg = 1:length(serieSTSE))
modelo3<-arima(serieSTSE, order=c(0,2,2), xreg = 1:length(serieSTSE))
plot.ts(seireSTSE)
plot.ts(serieSTSE)
lines(modelo1$residuals, col="green")
lines(modelo2$residuals, col="blue")
lines(modelo3$residuals, col="red")
modelo <- modelo1
Box.test(modelo$residuals)
hist(modelo$residuals, col="blue", prob=T)
lines(density(modelo$residuals), col="red")
modelo <- modelo2
Box.test(modelo$residuals)
hist(modelo$residuals, col="blue", prob=T)
lines(density(modelo$residuals), col="red")
modelo <- modelo3
Box.test(modelo$residuals)
hist(modelo$residuals, col="blue", prob=T)
lines(density(modelo$residuals), col="red")
jarque.bera.test(modelo1$residuals)
jarque.bera.test(modelo2$residuals)
jarque.bera.test(modelo3$residuals)
shapiro.test(modelo1$residuals)
shapiro.test(modelo2$residuals)
shapiro.test(modelo3$residuals)
aic(modelo1,modelo2, modelo3)
install.packages("AIC")
library(AIC)
install.packages("stats4")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
library("stats4", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
aic(modelo1,modelo2, modelo3)
install.packages(c("arulesViz", "assertthat", "BBmisc", "bnlearn", "boot", "caret", "cluster", "CORElearn", "curl", "DBI", "dendextend", "flexmix", "foreign", "formatR", "gam", "gRbase", "Hmisc", "htmltools", "hunspell", "jsonlite", "lattice", "lme4", "markdown", "MASS", "Matrix", "mclust", "memoise", "mlr", "pacman", "party", "pbkrtest", "plotly", "psych", "quantmod", "quantreg", "ranger", "RcppArmadillo", "RcppEigen", "readr", "readxl", "rmarkdown", "rpart", "RWeka", "RWekajars", "scatterplot3d", "shiny", "sourcetools", "SparseM", "stringi", "survival", "tibble", "tidyr", "VIM", "viridis", "viridisLite", "XML", "zoo"))
aic(modelo1,modelo2, modelo3)
source('~/Dropbox/zMaster/zProyectos/Series_temporales/Laboratorio.R')
source('~/Dropbox/zMaster/zProyectos/Series_temporales/Laboratorio.R')
source('~/Dropbox/zMaster/zProyectos/Series_temporales/Laboratorio.R')
library(tseries)
#Carga de paquetes
library(tseries)
library(DAAG)
library(forecast)
library(astsa)
library(AIC)
#Eliminamos lo que haya en el espacio de trabajo
rm(list=ls())
#Cargamos los datos de la serie "SerieLaboratorioDatos.dat" y los mostramos por pantalla
serie <- scan("SerieLaboratorioDatos.dat")
plot.ts(serie)
#########################################################
####################   TENDENCIA    #####################
#########################################################
#Veamos la tendencia de la serie
plot.ts(diff(serie))
#Ejemplo de serie que si necesitaría una transformación logarítmica para asegurarnos posteriormente de que sea estacionaria
data("AirPassengers")
plot.ts(diff(AirPassengers))
plot.ts(diff(log(AirPassengers)))
#Parece que una tendencia lineal puede ser buena opción:
#Modelamos el tiempo como instantes = 1,2,...,N
tiempo <- 1:length(serie)
#Modelamos recta x' <- a*x + b, calculando a y b
parametros <- lm(serie~tiempo)
b<- parametros$coefficients[1]
a<- parametros$coefficients[2]
#Calculamos la tendencia con modelo lineal
Tendencia <- a*tiempo + b
#Mostramos la serie junto con el modelo de la tendencia:
plot.ts(serie)
lines(Tendencia, col="red")
#Mostramos los residuos para ver que el error se distribuye uniformemente
plot.ts(parametros$residuals)
#Realizamos un test estadístico para ayudarnos a ver que el error se distribuye de forma normal
jarque.bera.test(parametros$residuals) #Aceptamos el test
#Eliminamos la tendencia de la serie
serieST <- serie-Tendencia
plot.ts(serieST)
#########################################################
##################   ESTACIONALIDAD    ##################
#########################################################
#Mostramos la gráfica de ACF para ayudarnos a calcular el periodo
acf(serieST)
#Calculamos la estacionalidad para nuestro ejemplo:
periodo <- 12 #Amplitud de la estacionalidad
Estacionalidad <- rep(0, periodo) #Vector para almacenar los valores medios
for (i in 1:periodo){ #Calcular cada valor en el vector
#Calculamos el valor de la estacionalidad como la media de los valores de la
#serie, comenzando por el valor "i", saltando de "periodo" en "periodo" componentes
Estacionalidad[i] <- mean(serieST[seq(i,length(serieST),by=periodo)])
}
plot.ts(Estacionalidad)
#Para eliminar la estacionalidad, restaremos los valores de la misma en toda la serie
#Repetimos la estacionalidad hasta igualar o superar el tamaño de la serie
Estacionalidad <- rep(Estacionalidad, ceiling(length(serieST)/periodo))
plot.ts(serieST)
lines(Estacionalidad, col="green")
#Ahora restamos la estacionaldiad a la serie sin tendencia
serieSTSE <- serieST - Estacionalidad
plot.ts(serieSTSE)
#########################################################
#################   ESTACIONARIEDAD    ##################
#########################################################
#¿Es nuestra serie estacionaria?
acf(serieSTSE)
acf(diff(serieSTSE))
acf(diff(diff(serieSTSE)))
#Asumimos el modelo ARIMA(p,0,q), vamos a calcular p y q a partir d elos ACF y PACF
acf(serieSTSE)
pacf(serieSTSE)
#Estariamos ante un modelo ARIMA(2,0,0)
#Ahora asumimos el modelo ARIMA(p,2,q)
acf(diff(diff(serieSTSE)))
pacf(diff(diff(serieSTSE)))
#Podría ser un ARIMA(0,2,1 o 2)
#Construimos nuestros modelos ARIMA
modelo1<-arima(serieSTSE, order=c(2,0,0), xreg = 1:length(serieSTSE))
modelo2<-arima(serieSTSE, order=c(0,2,1), xreg = 1:length(serieSTSE))
modelo3<-arima(serieSTSE, order=c(0,2,2), xreg = 1:length(serieSTSE))
#Visalizamos el ajuste
plot.ts(serieSTSE)
lines(modelo1$residuals, col="green")
lines(modelo2$residuals, col="blue")
lines(modelo3$residuals, col="red")
#Comprobamos la aleatoriedad de los errores del modelo
modelo <- modelo1
Box.test(modelo$residuals)
hist(modelo$residuals, col="blue", prob=T)
lines(density(modelo$residuals), col="red")
modelo <- modelo2
Box.test(modelo$residuals)
hist(modelo$residuals, col="blue", prob=T)
lines(density(modelo$residuals), col="red")
modelo <- modelo3
Box.test(modelo$residuals)
hist(modelo$residuals, col="blue", prob=T)
lines(density(modelo$residuals), col="red")
#Los 3 modelos pasan el test de Box-Pierce
#Comprobamos la distribución normal de los residuos
jarque.bera.test(modelo1$residuals)
jarque.bera.test(modelo2$residuals)
jarque.bera.test(modelo3$residuals)
#Los tres modelos pasan el test de Jarque-Bera
shapiro.test(modelo1$residuals)
shapiro.test(modelo2$residuals)
shapiro.test(modelo3$residuals)
#También el de Shapiro-Wilk
#El criterio de informacion de Akaike (AIC) proporciona una medida que contempla la precisión del ajuste del modelo y su complejidad
aic(modelo1,modelo2, modelo3)
AIC(modelo1,modelo2, modelo3)
modelo <- modelo1
NPred <- 12
p <- predict(modelo, n.ahead = NPred, newxreg = (length(serieSTSE)+1):(length(serieSTSE)+NPred))
seriePredichaSTSE <- c(serieSTSE, as.numeric(p$pred))
Estacionalidad <- Estacionalidad[1:periodo]
Estacionaldiad <- rep(Estacionalidad, ceiling(length(seriePredichaSTSE)/periodo))
seriePredichaST <- seriePredichaSTSE + Estacionaldiad
tiempoPred <- 1:(length(serieST)+NPred)
tendencia <- a*tiempoPred + b
seriePredicha <- seriePredichaST + Tendencia
plot.ts(serie, xlim=c(1, length(serie)+NPred), ylim=c(1,50))
lines(tiempoPred[(length(serie)+1):(length(serie)+NPred)],
seriePredicha[(length(serie)+1):(length(serie)+NPred)], col="red")
prediccionReal <- scan("SerieLaboratorioPrediccionCorecta.dat")
prediccionReal <- scan("SerieLaboratorioPrediccionCorrecta.dat")
lines(tiempoPred[(length(serie)+1):(length(serie)+NPred)], prediccionReal, col="blue")
